variables:
  BUILD_SOURCE: "https://hub.blitznote.com/src/caddy.upload/pipelines"
  CADDY_ORIGIN: "https://github.com/mholt/caddy.git"
  CADDY_BRANCH: "master"

stages:
- prepare
- test
- build
- integration_test
- benchmarks

.go_depends_template: &get_dependencies
  image: "hub.blitznote.com:4567/src/go:1.10"
  before_script:
  - mkdir -p _vendor-cache /var/go/ours
  - ln -s "$(pwd -P)/_vendor-cache" /var/go/theirs
  - export GOPATH=/var/go/theirs:/var/go/ours

  - export GODIR=/var/go/ours/src/blitznote.com/src/caddy.upload
  - mkdir -p "$(dirname "$GODIR")"
  - ln -sfv "$(pwd -P)" "$GODIR"

  - export CADDYDIR=/var/go/theirs/src/github.com/mholt/caddy
  - mkdir -p "$(dirname "$CADDYDIR")"
  - cd "$(dirname "$CADDYDIR")"
  - if [[ -d "caddy" ]]; then if ! grep -q -F "$CADDY_ORIGIN" caddy/.git/config; then rm -rf caddy; fi; fi
  - if [[ -d "caddy" ]]; then cd caddy; git checkout "$CADDY_BRANCH"; git fetch; git merge "origin/$CADDY_BRANCH"; else git clone -b "$CADDY_BRANCH" "$CADDY_ORIGIN"; fi
  - cd "$CADDYDIR"
  - git checkout "$(git -C . describe --abbrev=0 --tags HEAD)"
  - go get -d ./...

  - cd "$GODIR"
  - go get -d -t ./...
  - mv /var/go/theirs/src/{blitznote.com,plugin.hosting} /var/go/ours/src/ 2>/dev/null || true
  cache:
    key: "caddy-$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
    - _vendor-cache/

# To download dependencies once.
get_dependencies:
  stage: prepare
  <<: *get_dependencies
  script:
  - du -sh _vendor-cache
  cache:
    key: "caddy-$CI_COMMIT_REF_NAME"
    policy: pull-push
    paths:
    - _vendor-cache/

vet:
  stage: test
  <<: *get_dependencies
  script:
  - diff <(echo -n) <(gofmt -s -d $(find . -type f -name '*.go' -not -path "./_*"))
  - go vet ./...

lint:
  stage: test
  <<: *get_dependencies
  script:
  - ineffassign .
  - golint ./...

unittests:
  stage: test
  <<: *get_dependencies
  script:
  - go test -v ./...

.caddy_compile_template: &howto_compile
  stage: build
  <<: *get_dependencies
  script:
  - sed -i -e '/This is where other plugins/a \\t_ "blitznote.com/src/caddy.upload"' "$CADDYDIR"/caddy/caddymain/run.go
  - sed -i
      -e '/http.SetCookie/a \\t\tw.Header().Set("Vary", "Cookie")'
      -e '/acceptHeader :=/i \\tw.Header().Set("Cache-Control", "max-age=60, s-maxage=120, proxy-revalidate, stale-while-revalidate=600")'
      "$CADDYDIR"/caddyhttp/browse/browse.go

# In case this is not vanilla Go, add DHE cipher suites and remove non-PFS ones from any defaults' lists.
  - if grep -q -m 1 -F "TLS_DHE" "$(go env GOROOT)/src/crypto/tls/cipher_suites.go"; then
      sed -i
        -e '/^var SupportedCiphersMap/a \\t"DHE-RSA-AES128-GCM-SHA256":\ttls.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,\n\t"DHE-RSA-AES256-GCM-SHA384":\ttls.TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,\n\t"DHE-RSA-AES128-CBC-SHA256":\ttls.TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,\n\t"DHE-RSA-AES256-CBC-SHA256":\ttls.TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,\n\t"DHE-RSA-AES128-CBC-SHA":\ttls.TLS_DHE_RSA_WITH_AES_128_CBC_SHA,\n\t"DHE-RSA-AES256-CBC-SHA":\ttls.TLS_DHE_RSA_WITH_AES_256_CBC_SHA,'
        -e '/^var default/,/^}$/{/TLS_RSA/d}'
        "$CADDYDIR"/caddytls/config.go;
      gofmt -w "$CADDYDIR"/caddytls/config.go;
    fi

  - sed -i
      -e '/ClientHelloTelemetry = true/s@true@false@'
      "$CADDYDIR"/caddytls/handshake.go
  - export pkg="github.com/mholt/caddy/caddy/caddymain"
  - if grep -q -F enableTelemetry "$CADDYDIR"/caddy/caddymain/run.go; then
      export andflags=" -X '${pkg}.enableTelemetry=false'";
    else
      export andflags="";
    fi

  - cd "$CADDYDIR"
  - git diff || true
  - cd "$CADDYDIR"/caddy
  - go build
      -ldflags  "-s -w -buildid '' -X '${pkg}.gitTag=$(git describe --exact-match HEAD 2>/dev/null)'${andflags}"
      -asmflags "-trimpath=${GOPATH}"
      -gcflags  "-trimpath=${GOPATH}"
      -o ecaddy.upload~$(dpkg --print-architecture)
  - ./ecaddy.upload~$(dpkg --print-architecture) -version
  - mkdir -p "$GODIR"/_debug && mv ecaddy.upload~$(dpkg --print-architecture) $_
  - cp -a /usr/bin/cmp "$GODIR"/_debug/
  - sed -i -e '/caddy.upload/d' "$CADDYDIR"/caddy/caddymain/run.go

compile_ecaddy:
  <<: *howto_compile
  when: always
  artifacts:
    expire_in: 8 days
    name: "caddy-$CI_COMMIT_REF_NAME"
    paths:
    - _debug/

compile:vanilla_go:
  <<: *howto_compile
  image: "docker.io/blitznote/golang:latest"
  artifacts:
    expire_in: 2 days
    name: "caddy-vanilla-go-$CI_COMMIT_REF_NAME"
    paths:
    - _debug/

compile:go_tip:
  <<: *howto_compile
  image: "hub.blitznote.com:4567/src/go:head"
  allow_failure: true
  artifacts:
    expire_in: 2 days
    name: "caddy-go-tip-$CI_COMMIT_REF_NAME"
    paths:
    - _debug/

replay_example:
  stage: integration_test
  dependencies:
  - compile_ecaddy
  image: blitznote/debase:16.04
  script:
  - cd _debug
  - printf 'localhost:8000\n\nupload /web/path {\n  to "/var/tmp"\n}\n' | tee Caddyfile
  - ./ecaddy.upload* & sleep 0.2

  - curl -T /etc/os-release http://localhost:8000/web/path/from-release && test -s /var/tmp/from-release
  - curl -F hostname=@/etc/hostname -F resolv.txt=@/etc/resolv.conf http://localhost:8000/web/path/
  - ./cmp -b /etc/hostname /var/tmp/hostname
  - ./cmp -b /etc/resolv.conf /var/tmp/resolv.conf
  - 'curl -X MOVE -H "Destination: /web/path/to-release" http://localhost:8000/web/path/from-release && test -s /var/tmp/to-release'
  - curl -vX DELETE http://localhost:8000/web/path/to-release

# Results in a directory and the uploaded file.
  - curl -T /etc/os-release http://localhost:8000/web/path/subdir/os-release && test -s /var/tmp/subdir/os-release
  - rm /var/tmp/subdir/os-release
  - rmdir /var/tmp/subdir

  - kill %1

image_upload_example:
  stage: integration_test
  dependencies:
  - compile_ecaddy
  image: blitznote/debase:16.04
  script:
  - cd _debug
  - printf 'localhost:8001\n\nupload /web/path {\n  to "/var/tmp"\n  random_suffix_len 4\n}\n' | tee Caddyfile
  - ./ecaddy.upload* & sleep 0.2

  - fallocate --length $[ 1*1024*1024 ] image1.jpg
  - curl -T image1.jpg http://localhost:8001/web/path/first-image.jpg
  - ls -1 /var/tmp/*.jpg
  - test -s /var/tmp/first-image_????.jpg

  - kill %1

upload_using_put:
  stage: benchmarks
  when: manual
  dependencies:
  - compile_ecaddy
  image: blitznote/debase:16.04
  script:
  - cd _debug
  - printf 'localhost:8000\n\nupload /web/path {\n  to "/var/tmp"\n}\n' | tee Caddyfile
  - ./ecaddy.upload* & sleep 0.2

  - fallocate --length $[ 5 * 114 * 1024*1024] medium.file
  - curl -w "%{time_pretransfer} %{time_starttransfer} %{time_total} %{speed_upload}\n"
      -fsS
      -T medium.file http://localhost:8000/web/path/medium.file
  - for i in {1..5}; do
      timeout --foreground 6s
      curl -w "%{time_pretransfer} %{time_starttransfer} %{time_total} %{speed_upload}\n"
        -fsS
        -T medium.file http://localhost:8000/web/path/medium.file;
    done

  - kill %1

upload_multipart:
  stage: benchmarks
  when: manual
  dependencies:
  - compile_ecaddy
  image: blitznote/debase:16.04
  script:
  - cd _debug
  - printf 'localhost:8000\n\nupload /web/path {\n  to "/var/tmp"\n}\n' | tee Caddyfile
  - ./ecaddy.upload* & sleep 0.2

  - fallocate --length $[ 114 * 1024*1024] small_1.file
  - curl -w "%{time_pretransfer} %{time_starttransfer} %{time_total} %{speed_upload}\n"
      -fsS
      -F one=@small_1.file -F one=@small_1.file -F one=@small_1.file -F one=@small_1.file -F one=@small_1.file
      http://localhost:8000/web/path/
  - for i in {1..5}; do
      timeout --foreground 8s
      curl -w "%{time_pretransfer} %{time_starttransfer} %{time_total} %{speed_upload}\n"
        -fsS
        -F one=@small_1.file -F one=@small_1.file -F one=@small_1.file -F one=@small_1.file -F one=@small_1.file
        http://localhost:8000/web/path/;
    done

  - kill %1
